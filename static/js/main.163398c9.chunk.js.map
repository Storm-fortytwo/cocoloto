{"version":3,"sources":["Website thoughts/Rifas function copy.jsx","Website thoughts/ShowRaffles.jsx","App.js","index.js"],"names":["Rifas2","useState","data","setData","refresh","id","style","background","minWidth","className","columns","setColumns","alphabet","rows","setRows","filledFields","setFilledFields","shuffledNumbers","setShuffledNumbers","shuffle","setShuffle","loading","setLoading","table","setTable","number","setNumber","useEffect","a","fetch","dataObj","json","response","fetchData","poulateColumns","getData","getShuffledNumbers","populateRows","displayRows","action","fillElements","index","element","find","el","push","length","Array","from","Set","shuffles","console","log","array","randomIndex","currentIndex","Math","floor","random","result","column","width","limit","duplicated","letter","rowCounter","positionCounter","columnCounter","color","fixedPosition","position","findDuplicated","flex","padding","margin","type","border","textAlign","fontSize","display","placeholder","name","onClick","handleClick","onChange","handleInputChange","onkeypress","handleClickOutside","shuffleRows","newData","value","counter","x","interval","slice","map","getTablePosition","decimalPosition","rowPosition","columnPosition","toString","split","concat","event","target","document","addEventListener","keyCode","indexOf","preventDefault","getElementById","tablePosition","window","alert","items","item","splice","method","mode","body","JSON","stringify","then","res","e","highlight","Table","responsive","class","React","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.163398c9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"./Rifas copy.css\";\r\nimport { FilledInput } from \"@material-ui/core\";\r\n\r\nfunction Rifas2 () {\r\n  const [data, setData] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [columns, setColumns] = useState([<th id=\"#\" style={{ background: \"#C64FFC\", minWidth: \"3rem\"}} className=\"cell\">#</th>]);\r\n  const [alphabet, setAlphabet] = useState([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\"]);\r\n  const [rows, setRows] = useState([]);\r\n  const [filledFields, setFilledFields] = useState([]);\r\n  const [shuffledNumbers, setShuffledNumbers] = useState([]);\r\n  const [shuffle, setShuffle] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [table, setTable] = useState([]);\r\n  const [stateId, setStateId] = useState(\"\");\r\n  const [number, setNumber] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function fetchData () {\r\n      let dataObj = await fetch(\"https://antuaterrace.com/php2/ClassRaffles.php\");\r\n      let response = await dataObj.json();\r\n      setData(response);\r\n      setShuffle(true);\r\n    }\r\n\r\n    fetchData();\r\n    poulateColumns();\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    async function getShuffledNumbers () {\r\n      await getData(\"allData\");\r\n      setLoading(false);\r\n      setShuffle(false);\r\n    }\r\n\r\n    if(shuffle) {\r\n      getShuffledNumbers();\r\n    }\r\n  }, [shuffle]);\r\n\r\n  useEffect(() => {\r\n    if(!loading) {\r\n      populateRows();\r\n    }\r\n  }, [loading])\r\n\r\n  useEffect(() => {\r\n    displayRows();\r\n  }, [rows]);\r\n\r\n  const getData = async (action) => {\r\n\r\n    let fillElements = () => {\r\n      for (let index = 1; index < data.length + 1; index++) {\r\n        let element = data.find((el) => {return el.number == index});\r\n        if(element) {\r\n          filledFields.push(element);\r\n        } else {\r\n          shuffledNumbers.push(index);\r\n        }\r\n        }\r\n    setFilledFields(Array.from(new Set(filledFields)));\r\n    setShuffledNumbers(Array.from(new Set(shuffledNumbers)));\r\n      }\r\n\r\n    if (action != \"shuffle\") {\r\n      fillElements();\r\n    }\r\n\r\n  shuffles(filledFields);\r\n  shuffles(data);\r\n  shuffles(shuffledNumbers);\r\n\r\nconsole.log(\"filled array\" + filledFields.length);\r\nconsole.log(\"data array \" + data.length);\r\nconsole.log(\"shuffle array \" + shuffledNumbers.length);\r\n  };\r\n  const shuffles = (array) => { \r\n    let currentIndex = array.length,  randomIndex;\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex > 0) {\r\n  \r\n      // Pick a remaining element.\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n      /*function shuffle(array) {\r\n    array.sort(() => Math.random() - 0.5);\r\n  } */\r\n  \r\n    return array;\r\n  }; \r\n\r\n\r\n\r\n\r\n  const poulateColumns = () => {\r\n    let result = [];\r\n    for (let column = 1; column < 81; column++) {\r\n      result.push(\r\n        <th id={column} style={{ background: \"#C64FFC\", width: '1000px' }} className=\"cell\">\r\n          {column}\r\n        </th>\r\n      );\r\n    }\r\n    setColumns([columns, result]);\r\n  };\r\n\r\n  const populateRows = async () => {\r\n\r\n      //await getData(\"allData\");\r\n\r\n    let limit = alphabet.length + data.length + filledFields.length;\r\n    let result = [];\r\n    let duplicated = [];\r\n    let letter = 0;\r\n    var rowCounter = 0;\r\n    var positionCounter = 1;\r\n    var columnCounter = 0;\r\n\r\n    for (let column = 0; column < limit; column++) {\r\n      if (columnCounter === 0 || columnCounter % 81 == 0) {\r\n        result.push(\r\n          <td\r\n            id={alphabet[letter]}\r\n            style={{ background: \"#C64FFC\"}}\r\n            className=\"cell\"\r\n          >\r\n            {alphabet[letter]}\r\n          </td>\r\n        );\r\n        letter++;\r\n        columnCounter++;\r\n      } else {\r\n        var element = data[rowCounter];\r\n        var color = element?.number == 0 ? \"#418E41\" : \"#D2691E\";\r\n        var id = element?.id;\r\n\r\n        var fixedPosition = filledFields.find((el) => {return el.position == positionCounter});\r\n        var findDuplicated = duplicated.find((el) => {return el.id == id});\r\n\r\n        if(fixedPosition && !findDuplicated) {\r\n          duplicated.push(fixedPosition);\r\n          result.push(\r\n            <td\r\n              id={fixedPosition.id}\r\n              style={{ background: \"#D2691E\", flex: '1', width: \"100%\", padding: \"0\", margin: \"0\"}}\r\n              className={\"cell\"}\r\n            >\r\n              <input\r\n              type=\"text\"\r\n              style={{ background: \"#D2691E\", width: \"4rem\", padding: \"0\", margin: \"0\", border: 'hidden', textAlign: \"center\", fontSize: \"5ren\", display: \"block\"}}\r\n              id = {fixedPosition.id}\r\n              placeholder = {fixedPosition.number}\r\n              name = {positionCounter}\r\n              onClick={handleClick}\r\n              onChange={handleInputChange}\r\n              onkeypress={handleClickOutside}\r\n              />\r\n            </td>\r\n          );\r\n\r\n          if(fixedPosition == element) {\r\n            rowCounter++;\r\n          }\r\n\r\n          positionCounter++;\r\n          columnCounter++;\r\n        }\r\n        \r\n        if (findDuplicated) {\r\n          rowCounter++;\r\n        }\r\n        if (!fixedPosition && !findDuplicated) {\r\n          result.push(\r\n            <td\r\n              id={element?.id}\r\n              style={{ background: color, flex: '1', width: \"100%\", padding: \"0\", margin: \"0\"}}\r\n              className={\"cell\"}\r\n            >\r\n              <input\r\n              type=\"text\"\r\n              style={{ background: color, width: \"4rem\", padding: \"0\", margin: \"0\", border: 'hidden', textAlign: \"center\", fontSize: \"5ren\", display: \"block\"}}\r\n              id = {element?.id}\r\n              name = {positionCounter}\r\n              onClick={handleClick}\r\n              onChange={handleInputChange}\r\n              onkeypress={handleClickOutside}\r\n              />\r\n            </td>\r\n          );\r\n          rowCounter++;\r\n          positionCounter++;\r\n          columnCounter++;\r\n        }        \r\n      }\r\n    }\r\n    setRows(result);\r\n  };\r\n\r\n  const shuffleRows = async () => {\r\n\r\n    console.log(\"data lenght is \" + data.length)\r\n    console.log(\"shuddlednumbers lenght is \" + shuffledNumbers.length)\r\n    console.log(\"filledfield lenght is \" + filledFields.length)\r\n\r\n    \r\n  shuffles(filledFields);\r\n  shuffles(data);\r\n  shuffles(shuffledNumbers);\r\n\r\n    let limit = alphabet.length + data.length + filledFields.length;\r\n    let result = [];\r\n    let duplicated = [];\r\n    let newData = data;\r\n    let letter = 0;\r\n    var rowCounter = 0;\r\n    var positionCounter = 1;\r\n    var columnCounter = 0;\r\n    var shuffleCounter = 0;\r\n\r\n    for (let column = 0; column < limit; column++) {\r\n      if (columnCounter === 0 || columnCounter % 81 == 0) {\r\n        result.push(\r\n          <td\r\n            id={alphabet[letter]}\r\n            style={{ background: \"#C64FFC\"}}\r\n            className=\"cell\"\r\n          >\r\n            {alphabet[letter]}\r\n          </td>\r\n        );\r\n        letter++;\r\n        columnCounter++;\r\n      } else {\r\n        var element = data[rowCounter];\r\n        var color = \"white\";\r\n        var id = element?.id;\r\n\r\n        var fixedPosition = filledFields.find((el) => {return el.position == positionCounter});\r\n        var findDuplicated = duplicated.find((el) => {return el.id == id});\r\n\r\n        if(fixedPosition && !findDuplicated) {\r\n          duplicated.push(fixedPosition);\r\n          result.push(\r\n            <td\r\n              id={fixedPosition.id}\r\n              style={{ background: \"#D2691E\", flex: '1', width: \"100%\", padding: \"0\", margin: \"0\"}}\r\n              className={\"cell\"}\r\n            >\r\n              <input\r\n              type=\"text\"\r\n              style={{ background: \"#D2691E\", width: \"4rem\", padding: \"0\", margin: \"0\", border: 'hidden', textAlign: \"center\", fontSize: \"5ren\", display: \"block\"}}\r\n              id = {fixedPosition.id}\r\n              value = {fixedPosition.number}\r\n              name = {positionCounter}\r\n              onClick={handleClick}\r\n              onChange={handleInputChange}\r\n              onkeypress={handleClickOutside}\r\n              />\r\n            </td>\r\n          );\r\n\r\n          if(fixedPosition == element) {\r\n            rowCounter++;\r\n          }\r\n\r\n          positionCounter++;\r\n          columnCounter++;\r\n        }\r\n        \r\n        if (findDuplicated) {\r\n          rowCounter++;\r\n        }\r\n        if (!fixedPosition && !findDuplicated) {\r\n          console.log(\"before\")\r\n          newData[rowCounter].number = shuffledNumbers[rowCounter];\r\n          newData[rowCounter].position = positionCounter;\r\n          result.push(\r\n            <td\r\n              id={id}\r\n              style={{ background: color, flex: '1', width: \"100%\", padding: \"0\", margin: \"0\"}}\r\n              className={\"cell\"}\r\n            >\r\n              <input\r\n              type=\"text\"\r\n              style={{ background: color, width: \"4rem\", padding: \"0\", margin: \"0\", border: 'hidden', textAlign: \"center\", fontSize: \"5ren\", display: \"block\"}}\r\n              id = {id}\r\n              value = {shuffledNumbers[rowCounter]}\r\n              name = {positionCounter}\r\n              onClick={handleClick}\r\n              onChange={handleInputChange}\r\n              onkeypress={handleClickOutside}\r\n              />\r\n            </td>\r\n          );\r\n          rowCounter++;\r\n          positionCounter++;\r\n          columnCounter++;\r\n          shuffleCounter++;\r\n        }        \r\n      }\r\n    }\r\n    \r\n    setRows(result);\r\n    setData(newData);\r\n  };\r\n\r\n  const cleanRows = async () => {\r\n\r\n    let limit = alphabet.length + data.length;\r\n    let result = [];\r\n    let newData = data;\r\n    let letter = 0;\r\n    var positionCounter = 0;\r\n\r\n    //await getData(\"clean\")\r\n\r\n    for (let column = 0; column < limit; column++) {\r\n      if (column === 0 || column % 81 == 0) {\r\n        result.push(\r\n          <td\r\n            id={alphabet[letter]}\r\n            style={{ background: \"#C64FFC\"}}\r\n            className=\"cell\"\r\n          >\r\n            {alphabet[letter]}\r\n          </td>\r\n        );\r\n        letter++;\r\n      } else {\r\n        var element = data[positionCounter];\r\n        var color = \"#418E41\";\r\n        var id = element.id;\r\n\r\n          newData[positionCounter].number = 0;\r\n          newData[positionCounter].position = 0;\r\n          result.push(\r\n            <td\r\n              id={id}\r\n              style={{ background: color, flex: '1', width: \"100%\", padding: \"0\", margin: \"0\"}}\r\n              className={\"cell\"}\r\n            >\r\n              <input\r\n              type=\"text\"\r\n              style={{ background: color, width: \"4rem\", padding: \"0\", margin: \"0\", border: 'hidden', textAlign: \"center\", fontSize: \"5ren\", display: \"block\"}}\r\n              id = {id}\r\n              value = {\"\"}\r\n              name = {positionCounter}\r\n              onClick={handleClick}\r\n              onChange={handleInputChange}\r\n              onkeypress={handleClickOutside}\r\n              />\r\n            </td>\r\n          );\r\n\r\n          positionCounter++;\r\n        }        \r\n      }\r\n      setRows(result);\r\n      setData(newData);\r\n    }\r\n\r\n  const displayRows = async() => {\r\n    console.log(\"display rows running\")\r\n    let counter = 0;\r\n    let table = [];\r\n    for (let x = 0; x < alphabet.length; x++) {\r\n      let interval = rows.slice(counter, counter + 81);\r\n      counter = counter + 81;\r\n      table.push(<tr>{interval.map((el) => el)}</tr>);\r\n    }\r\n    setTable(table);\r\n  };\r\n\r\n  const getTablePosition = (value) => {\r\n    var decimalPosition = (value/80);\r\n    var letter = Math.floor(decimalPosition);\r\n    var rowPosition = alphabet[letter];\r\n    var columnPosition = \"\";\r\n\r\n    if(letter == 0) {\r\n      columnPosition = value;\r\n    } else {\r\n      columnPosition = decimalPosition.toString().split(\".\")[1]/125;\r\n    }\r\n    var tablePosition = rowPosition.concat(columnPosition);\r\n    return tablePosition;\r\n  }\r\n\r\n  const handleClickOutside = event => {\r\n\r\n    event.target.placeholder = '';\r\n    document.addEventListener('keypress', handleClickOutside, false);\r\n\r\n    if(event.keyCode === 13){\r\n      var value = data.find((element) => {return element.id == event.target.id});\r\n      const position = data.indexOf(value);\r\n      var duplicated = data.find((element) => {return element.number == event.target.value && element.id != value.id});\r\n      event.preventDefault();\r\n\r\n      if(duplicated && event.target.value != 0) {\r\n        /*value.number = 0;\r\n        value.position = 0;\r\n        let items = [...data];\r\n        let item = {...items[position]};\r\n        item.number = 0;\r\n        item.position = 0;\r\n        items[position] = item;\r\n        setData(items); */\r\n        let inputValue = document.getElementById(event.target.id);\r\n        inputValue = \"\";\r\n\r\n        document.addEventListener('keypress', handleClickOutside, false);\r\n\r\n        var tablePosition = getTablePosition(duplicated.position);\r\n        event.target.placeholder = value.number != 0 ? value.number : \"\";\r\n        event.target.value = \"\";\r\n        window.alert(\"O número já existe na posição \" + tablePosition);\r\n        console.log(\"inside dupliate\")\r\n        \r\n} else if (event.target.value < 1 || event.target.value > 2000) {\r\n  window.alert(\"Não é um valor válido. Por favor inserir números com valores entre 0 e 2000\");\r\n  console.log(\"NOT valid\");\r\n  event.target.placeholder = value.number != 0 ? value.number : \"\";\r\n  event.target.value = \"\";\r\n} else {\r\n  value.number = event.target.value;\r\n  value.position = event.target.name;\r\n  let items = [...data];\r\n  let item = {...items[position]};\r\n  items[position] = item;\r\n  setData({items});\r\n  console.log(\"valid and NOT duplicated\");\r\n  shuffledNumbers.splice(shuffledNumbers.indexOf(value.number), 1);\r\n  filledFields.push(data[position]);\r\n\r\n  fetch(\"https://antuaterrace.com/php2/insert2.php\", {\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    body: JSON.stringify(value)\r\n})\r\n.then(res => console.log(res));\r\n\r\n  console.log(\"removing number: \" + value.number);\r\n  console.log(data[position]);\r\n}\r\npopulateRows();\r\nconsole.log(number);\r\n  }\r\n}\r\n\r\n  const handleClick = (e) => {\r\n    document.addEventListener('keypress', handleClickOutside, true);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    console.log(\"inside the handle change\")\r\n};\r\n\r\n  const handleInputChange = (e) => {\r\n    handleChange(e); \r\n};\r\n\r\n  const showNumbers = () => {\r\n    shuffleRows();\r\n    setNumber(false);\r\n  }\r\n  const cleanNumbers = () => {\r\n    console.log(\"running update rows for cleanNumbers\")\r\n    cleanRows();\r\n  }\r\n\r\n  const getPosition = (e) => {\r\n    document.addEventListener('keypress', highlight, true);\r\n  }\r\n\r\n  const highlight = (e) => {\r\n    document.addEventListener('keypress', handleClickOutside, false);\r\n\r\n    if(e.keyCode === 13){\r\n      e.preventDefault();  \r\n      var value = data.find((element) => {return element.number == e.target.value});     \r\n      window.alert(\"O vencedor está na casa \" + getTablePosition(value.position));\r\n    } \r\n\r\n  }\r\n  \r\n\r\n    return (\r\n      <div className=\"rifas\">\r\n        <h2>{\"Cocoloto 2023\"}</h2>\r\n        <Table responsive=\"sm\">\r\n          <thead>\r\n            <tr>{columns}</tr>\r\n          </thead>\r\n          <tbody>{loading ? <div>hey</div> : table}</tbody>\r\n        </Table> {number ? (<button onClick={showNumbers} class=\"btn btn-primary mb-2\">\r\n              Shuffle numbers\r\n            </button>) : <input id=\"winner\" type=\"text\" placeholder=\"Vencedor\" onClick={getPosition}/>\r\n}\r\n                  </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Rifas2;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nclass ShowRaffles extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.header = [\r\n      { key: \"id\", label: \"Id\" },\r\n      { key: \"number\", label: \"Number\" },\r\n      { key: \"seller\", label: \"Seller\" },\r\n      { key: \"buyer\", label: \"Buyer\" },\r\n    ];\r\n\r\n    this.state = { data: [] };\r\n  }\r\n\r\n /* componentDidMount() {\r\n    fetch(\"https://antuaterrace.com/php2/ClassRaffles.php\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        this.setState({ data: result });\r\n      });\r\n  } */\r\n\r\n  /*post() {\r\n    fetch(\"https://antuaterrace.com/php2/insert.php\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        body: JSON.stringify({id: \"E13\", number: 13, seller: \"\", buyer: \"\" })\r\n    })\r\n    .then(res => console.log(res));\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"db\">\r\n        <h2>Data from database</h2>\r\n        <Table responsive=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              {this.header.map((el) => (\r\n                <th key={el.key}>{el.label}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n              {this.state.data.map((el) => (\r\n                <tr>\r\n                <td key={el.id}>{el.id}</td>\r\n                <td key={el.number}>{el.number}</td>\r\n                <td key={el.seller}>{el.seller}</td>\r\n                <td key={el.buyer}>{el.buyer}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowRaffles;\r\n\r\n/*\r\nimport React from \"react\";\r\n\r\nexport default function showRaffles () {\r\n\r\n    function showRaffles() {\r\n        console.log(\"running function\");\r\n        fetch(\"http://antuaterrace.com/php2/ClassRaffles.php\", {\r\n            mode: 'no-cors', \r\n\r\n        })\r\n        .then((response)=> {console.log(response.json())})\r\n        .then((responseJson)=>{\r\n            console.log(responseJson);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>{showRaffles()}</div>);\r\n} */\r\n","import './App.css';\nimport Rifas from \"./Website thoughts/Rifas function copy.jsx\";\n//import Rifas from \"./Shuffle_numbers/Rifas_new copy.jsx\";\nimport ShowRaffles from './Website thoughts/ShowRaffles.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Rifas></Rifas>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}